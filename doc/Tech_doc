# BeanCKUP CLI 技术文档

## 架构概览

BeanCKUP CLI 采用模块化设计，核心流程分为配置、扫描、历史管理、分卷计划、打包交付、清单管理和恢复七大部分。各模块通过统一的数据结构（见 types.go）协作，支持高效的增量备份与灵活恢复。

## 主要模块说明

### 1. 配置与初始化（internal/config）

- 负责读取/保存工作区配置（config.json），记忆上次工作区路径。
- 提供交互式配置向导，支持交付路径、分卷大小、压缩级别、密码等参数设置。

### 2. 文件扫描与分类（internal/indexer）

- 递归扫描工作区目录，生成所有文件/目录节点（FileNode）。
- 结合历史状态，自动区分“新文件”和“引用文件”（未变更/移动的文件）。
- 支持跨平台获取文件创建时间、哈希校验。

### 3. 历史状态管理（internal/history）

- 加载所有历史交付清单（manifest），建立文件与包的映射关系。
- 支持快速定位文件的历史包和路径，便于后续引用和恢复。

### 4. 分卷计划与会话（internal/session）

- 根据扫描结果和配置，自动生成分卷计划（Plan/Episode）。
- 支持总大小和单卷大小限制，自动分配文件到各分卷。
- 记录每次交付的会话ID、时间戳、分卷状态等。

### 5. 打包与交付（internal/packager）

- 调用 7z 工具，将新文件和清单打包为 .7z 文件。
- 支持多级压缩、加密、进度回调。
- 每个分卷包内含独立的 manifest 清单，便于后续恢复。

### 6. 清单管理（internal/manifest）

- 生成标准化的 manifest 文件，记录每个包的文件列表、哈希、时间戳等。
- 支持清单的序列化、保存与提取。

### 7. 恢复流程（internal/restorer）

- 自动发现交付包目录下的所有历史会话和分卷。
- 智能加载所有相关清单，支持按需恢复全部或部分文件。
- 支持引用文件的智能查找和回退，确保最大限度还原历史状态。

## 核心数据结构

详见 `internal/types/types.go`，主要包括：

- `Config`：全局配置
- `FileNode`：文件/目录节点，含五元组信息
- `HistoricalState`：历史状态映射
- `Plan`/`Episode`：分卷计划与分卷
- `Manifest`：交付清单

## 关键实现细节

- **五元组判定**：通过文件路径、大小、修改时间、创建时间、哈希值判定文件是否变更或移动。
- **分卷策略**：优先保证每个分卷大小不超过设定阈值，E01 分卷包含所有引用文件，其余分卷仅含新文件。
- **恢复智能查找**：恢复时优先按引用路径查找文件，找不到时自动回退到所有相关包中查找。

## 常见问题

- 需确保 7z 命令行工具可用。
- 恢复时如遇密码错误，可重试输入。
- 支持跨平台（Windows/Linux/Mac），部分功能如创建时间获取有平台差异。

---

如需扩展或定制功能，请参考各模块源码及注释。
